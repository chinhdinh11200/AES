package aes;

import aes_at.bm.AES;
import java.awt.List;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.Base64;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import jdk.nashorn.internal.objects.NativeArray;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Admin
 */

 
public class AES_Test {
    private String stringKey;
    private byte[] key;
    private int[] word;   // từ mở rộng khóa
    private int[][] in;
    private int[][] out;
    private int Nk;
    private static int Nb = 4;
    private int Nr;
    private String stringEnCode = "";
    
    
    public static  int[] mul2 = new int[] {
        0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
        0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
        0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
        0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,	
        0x80,0x82,0x84,0x86,0x88,0x8a,0x8c,0x8e,0x90,0x92,0x94,0x96,0x98,0x9a,0x9c,0x9e,
        0xa0,0xa2,0xa4,0xa6,0xa8,0xaa,0xac,0xae,0xb0,0xb2,0xb4,0xb6,0xb8,0xba,0xbc,0xbe,
        0xc0,0xc2,0xc4,0xc6,0xc8,0xca,0xcc,0xce,0xd0,0xd2,0xd4,0xd6,0xd8,0xda,0xdc,0xde,
        0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xee,0xf0,0xf2,0xf4,0xf6,0xf8,0xfa,0xfc,0xfe,
        0x1b,0x19,0x1f,0x1d,0x13,0x11,0x17,0x15,0x0b,0x09,0x0f,0x0d,0x03,0x01,0x07,0x05,
        0x3b,0x39,0x3f,0x3d,0x33,0x31,0x37,0x35,0x2b,0x29,0x2f,0x2d,0x23,0x21,0x27,0x25,
        0x5b,0x59,0x5f,0x5d,0x53,0x51,0x57,0x55,0x4b,0x49,0x4f,0x4d,0x43,0x41,0x47,0x45,
        0x7b,0x79,0x7f,0x7d,0x73,0x71,0x77,0x75,0x6b,0x69,0x6f,0x6d,0x63,0x61,0x67,0x65,
        0x9b,0x99,0x9f,0x9d,0x93,0x91,0x97,0x95,0x8b,0x89,0x8f,0x8d,0x83,0x81,0x87,0x85,
        0xbb,0xb9,0xbf,0xbd,0xb3,0xb1,0xb7,0xb5,0xab,0xa9,0xaf,0xad,0xa3,0xa1,0xa7,0xa5,
        0xdb,0xd9,0xdf,0xdd,0xd3,0xd1,0xd7,0xd5,0xcb,0xc9,0xcf,0xcd,0xc3,0xc1,0xc7,0xc5,
        0xfb,0xf9,0xff,0xfd,0xf3,0xf1,0xf7,0xf5,0xeb,0xe9,0xef,0xed,0xe3,0xe1,0xe7,0xe5
    };
    
    public static  int[] mul3 = new int[] {
        0x00,0x03,0x06,0x05,0x0c,0x0f,0x0a,0x09,0x18,0x1b,0x1e,0x1d,0x14,0x17,0x12,0x11,
        0x30,0x33,0x36,0x35,0x3c,0x3f,0x3a,0x39,0x28,0x2b,0x2e,0x2d,0x24,0x27,0x22,0x21,
        0x60,0x63,0x66,0x65,0x6c,0x6f,0x6a,0x69,0x78,0x7b,0x7e,0x7d,0x74,0x77,0x72,0x71,
        0x50,0x53,0x56,0x55,0x5c,0x5f,0x5a,0x59,0x48,0x4b,0x4e,0x4d,0x44,0x47,0x42,0x41,
        0xc0,0xc3,0xc6,0xc5,0xcc,0xcf,0xca,0xc9,0xd8,0xdb,0xde,0xdd,0xd4,0xd7,0xd2,0xd1,
        0xf0,0xf3,0xf6,0xf5,0xfc,0xff,0xfa,0xf9,0xe8,0xeb,0xee,0xed,0xe4,0xe7,0xe2,0xe1,
        0xa0,0xa3,0xa6,0xa5,0xac,0xaf,0xaa,0xa9,0xb8,0xbb,0xbe,0xbd,0xb4,0xb7,0xb2,0xb1,
        0x90,0x93,0x96,0x95,0x9c,0x9f,0x9a,0x99,0x88,0x8b,0x8e,0x8d,0x84,0x87,0x82,0x81,	
        0x9b,0x98,0x9d,0x9e,0x97,0x94,0x91,0x92,0x83,0x80,0x85,0x86,0x8f,0x8c,0x89,0x8a,
        0xab,0xa8,0xad,0xae,0xa7,0xa4,0xa1,0xa2,0xb3,0xb0,0xb5,0xb6,0xbf,0xbc,0xb9,0xba,
        0xfb,0xf8,0xfd,0xfe,0xf7,0xf4,0xf1,0xf2,0xe3,0xe0,0xe5,0xe6,0xef,0xec,0xe9,0xea,	
        0xcb,0xc8,0xcd,0xce,0xc7,0xc4,0xc1,0xc2,0xd3,0xd0,0xd5,0xd6,0xdf,0xdc,0xd9,0xda,	
        0x5b,0x58,0x5d,0x5e,0x57,0x54,0x51,0x52,0x43,0x40,0x45,0x46,0x4f,0x4c,0x49,0x4a,
        0x6b,0x68,0x6d,0x6e,0x67,0x64,0x61,0x62,0x73,0x70,0x75,0x76,0x7f,0x7c,0x79,0x7a,	
        0x3b,0x38,0x3d,0x3e,0x37,0x34,0x31,0x32,0x23,0x20,0x25,0x26,0x2f,0x2c,0x29,0x2a,
        0x0b,0x08,0x0d,0x0e,0x07,0x04,0x01,0x02,0x13,0x10,0x15,0x16,0x1f,0x1c,0x19,0x1a
    };
    
    public static  int[] mul9 = new int[] {
        0x00,0x09,0x12,0x1b,0x24,0x2d,0x36,0x3f,0x48,0x41,0x5a,0x53,0x6c,0x65,0x7e,0x77,
        0x90,0x99,0x82,0x8b,0xb4,0xbd,0xa6,0xaf,0xd8,0xd1,0xca,0xc3,0xfc,0xf5,0xee,0xe7,
        0x3b,0x32,0x29,0x20,0x1f,0x16,0x0d,0x04,0x73,0x7a,0x61,0x68,0x57,0x5e,0x45,0x4c,
        0xab,0xa2,0xb9,0xb0,0x8f,0x86,0x9d,0x94,0xe3,0xea,0xf1,0xf8,0xc7,0xce,0xd5,0xdc,
        0x76,0x7f,0x64,0x6d,0x52,0x5b,0x40,0x49,0x3e,0x37,0x2c,0x25,0x1a,0x13,0x08,0x01,
        0xe6,0xef,0xf4,0xfd,0xc2,0xcb,0xd0,0xd9,0xae,0xa7,0xbc,0xb5,0x8a,0x83,0x98,0x91,
        0x4d,0x44,0x5f,0x56,0x69,0x60,0x7b,0x72,0x05,0x0c,0x17,0x1e,0x21,0x28,0x33,0x3a,
        0xdd,0xd4,0xcf,0xc6,0xf9,0xf0,0xeb,0xe2,0x95,0x9c,0x87,0x8e,0xb1,0xb8,0xa3,0xaa,	
        0xec,0xe5,0xfe,0xf7,0xc8,0xc1,0xda,0xd3,0xa4,0xad,0xb6,0xbf,0x80,0x89,0x92,0x9b,	
        0x7c,0x75,0x6e,0x67,0x58,0x51,0x4a,0x43,0x34,0x3d,0x26,0x2f,0x10,0x19,0x02,0x0b,
        0xd7,0xde,0xc5,0xcc,0xf3,0xfa,0xe1,0xe8,0x9f,0x96,0x8d,0x84,0xbb,0xb2,0xa9,0xa0,
        0x47,0x4e,0x55,0x5c,0x63,0x6a,0x71,0x78,0x0f,0x06,0x1d,0x14,0x2b,0x22,0x39,0x30,
        0x9a,0x93,0x88,0x81,0xbe,0xb7,0xac,0xa5,0xd2,0xdb,0xc0,0xc9,0xf6,0xff,0xe4,0xed,
        0x0a,0x03,0x18,0x11,0x2e,0x27,0x3c,0x35,0x42,0x4b,0x50,0x59,0x66,0x6f,0x74,0x7d,	
        0xa1,0xa8,0xb3,0xba,0x85,0x8c,0x97,0x9e,0xe9,0xe0,0xfb,0xf2,0xcd,0xc4,0xdf,0xd6,
        0x31,0x38,0x23,0x2a,0x15,0x1c,0x07,0x0e,0x79,0x70,0x6b,0x62,0x5d,0x54,0x4f,0x46
    };
        
    public static  int[] mulb = new int[] {
        0x00,0x0b,0x16,0x1d,0x2c,0x27,0x3a,0x31,0x58,0x53,0x4e,0x45,0x74,0x7f,0x62,0x69,
        0xb0,0xbb,0xa6,0xad,0x9c,0x97,0x8a,0x81,0xe8,0xe3,0xfe,0xf5,0xc4,0xcf,0xd2,0xd9,
        0x7b,0x70,0x6d,0x66,0x57,0x5c,0x41,0x4a,0x23,0x28,0x35,0x3e,0x0f,0x04,0x19,0x12,
        0xcb,0xc0,0xdd,0xd6,0xe7,0xec,0xf1,0xfa,0x93,0x98,0x85,0x8e,0xbf,0xb4,0xa9,0xa2,
        0xf6,0xfd,0xe0,0xeb,0xda,0xd1,0xcc,0xc7,0xae,0xa5,0xb8,0xb3,0x82,0x89,0x94,0x9f,
        0x46,0x4d,0x50,0x5b,0x6a,0x61,0x7c,0x77,0x1e,0x15,0x08,0x03,0x32,0x39,0x24,0x2f,
        0x8d,0x86,0x9b,0x90,0xa1,0xaa,0xb7,0xbc,0xd5,0xde,0xc3,0xc8,0xf9,0xf2,0xef,0xe4,
        0x3d,0x36,0x2b,0x20,0x11,0x1a,0x07,0x0c,0x65,0x6e,0x73,0x78,0x49,0x42,0x5f,0x54,
        0xf7,0xfc,0xe1,0xea,0xdb,0xd0,0xcd,0xc6,0xaf,0xa4,0xb9,0xb2,0x83,0x88,0x95,0x9e,
        0x47,0x4c,0x51,0x5a,0x6b,0x60,0x7d,0x76,0x1f,0x14,0x09,0x02,0x33,0x38,0x25,0x2e,
        0x8c,0x87,0x9a,0x91,0xa0,0xab,0xb6,0xbd,0xd4,0xdf,0xc2,0xc9,0xf8,0xf3,0xee,0xe5,
        0x3c,0x37,0x2a,0x21,0x10,0x1b,0x06,0x0d,0x64,0x6f,0x72,0x79,0x48,0x43,0x5e,0x55,
        0x01,0x0a,0x17,0x1c,0x2d,0x26,0x3b,0x30,0x59,0x52,0x4f,0x44,0x75,0x7e,0x63,0x68,
        0xb1,0xba,0xa7,0xac,0x9d,0x96,0x8b,0x80,0xe9,0xe2,0xff,0xf4,0xc5,0xce,0xd3,0xd8,
        0x7a,0x71,0x6c,0x67,0x56,0x5d,0x40,0x4b,0x22,0x29,0x34,0x3f,0x0e,0x05,0x18,0x13,
        0xca,0xc1,0xdc,0xd7,0xe6,0xed,0xf0,0xfb,0x92,0x99,0x84,0x8f,0xbe,0xb5,0xa8,0xa3
    };
        
    public static  int[] muld = new int[] {
        0x00,0x0d,0x1a,0x17,0x34,0x39,0x2e,0x23,0x68,0x65,0x72,0x7f,0x5c,0x51,0x46,0x4b,
        0xd0,0xdd,0xca,0xc7,0xe4,0xe9,0xfe,0xf3,0xb8,0xb5,0xa2,0xaf,0x8c,0x81,0x96,0x9b,
        0xbb,0xb6,0xa1,0xac,0x8f,0x82,0x95,0x98,0xd3,0xde,0xc9,0xc4,0xe7,0xea,0xfd,0xf0,
        0x6b,0x66,0x71,0x7c,0x5f,0x52,0x45,0x48,0x03,0x0e,0x19,0x14,0x37,0x3a,0x2d,0x20,
        0x6d,0x60,0x77,0x7a,0x59,0x54,0x43,0x4e,0x05,0x08,0x1f,0x12,0x31,0x3c,0x2b,0x26,
        0xbd,0xb0,0xa7,0xaa,0x89,0x84,0x93,0x9e,0xd5,0xd8,0xcf,0xc2,0xe1,0xec,0xfb,0xf6,
        0xd6,0xdb,0xcc,0xc1,0xe2,0xef,0xf8,0xf5,0xbe,0xb3,0xa4,0xa9,0x8a,0x87,0x90,0x9d,
        0x06,0x0b,0x1c,0x11,0x32,0x3f,0x28,0x25,0x6e,0x63,0x74,0x79,0x5a,0x57,0x40,0x4d,
        0xda,0xd7,0xc0,0xcd,0xee,0xe3,0xf4,0xf9,0xb2,0xbf,0xa8,0xa5,0x86,0x8b,0x9c,0x91,
        0x0a,0x07,0x10,0x1d,0x3e,0x33,0x24,0x29,0x62,0x6f,0x78,0x75,0x56,0x5b,0x4c,0x41,
        0x61,0x6c,0x7b,0x76,0x55,0x58,0x4f,0x42,0x09,0x04,0x13,0x1e,0x3d,0x30,0x27,0x2a,
        0xb1,0xbc,0xab,0xa6,0x85,0x88,0x9f,0x92,0xd9,0xd4,0xc3,0xce,0xed,0xe0,0xf7,0xfa,
        0xb7,0xba,0xad,0xa0,0x83,0x8e,0x99,0x94,0xdf,0xd2,0xc5,0xc8,0xeb,0xe6,0xf1,0xfc,
        0x67,0x6a,0x7d,0x70,0x53,0x5e,0x49,0x44,0x0f,0x02,0x15,0x18,0x3b,0x36,0x21,0x2c,
        0x0c,0x01,0x16,0x1b,0x38,0x35,0x22,0x2f,0x64,0x69,0x7e,0x73,0x50,0x5d,0x4a,0x47,
        0xdc,0xd1,0xc6,0xcb,0xe8,0xe5,0xf2,0xff,0xb4,0xb9,0xae,0xa3,0x80,0x8d,0x9a,0x97
    };
        
    public static  int[] mule = new int[] {
        0x00,0x0e,0x1c,0x12,0x38,0x36,0x24,0x2a,0x70,0x7e,0x6c,0x62,0x48,0x46,0x54,0x5a,
        0xe0,0xee,0xfc,0xf2,0xd8,0xd6,0xc4,0xca,0x90,0x9e,0x8c,0x82,0xa8,0xa6,0xb4,0xba,
        0xdb,0xd5,0xc7,0xc9,0xe3,0xed,0xff,0xf1,0xab,0xa5,0xb7,0xb9,0x93,0x9d,0x8f,0x81,
        0x3b,0x35,0x27,0x29,0x03,0x0d,0x1f,0x11,0x4b,0x45,0x57,0x59,0x73,0x7d,0x6f,0x61,
        0xad,0xa3,0xb1,0xbf,0x95,0x9b,0x89,0x87,0xdd,0xd3,0xc1,0xcf,0xe5,0xeb,0xf9,0xf7,
        0x4d,0x43,0x51,0x5f,0x75,0x7b,0x69,0x67,0x3d,0x33,0x21,0x2f,0x05,0x0b,0x19,0x17,
        0x76,0x78,0x6a,0x64,0x4e,0x40,0x52,0x5c,0x06,0x08,0x1a,0x14,0x3e,0x30,0x22,0x2c,
        0x96,0x98,0x8a,0x84,0xae,0xa0,0xb2,0xbc,0xe6,0xe8,0xfa,0xf4,0xde,0xd0,0xc2,0xcc,
        0x41,0x4f,0x5d,0x53,0x79,0x77,0x65,0x6b,0x31,0x3f,0x2d,0x23,0x09,0x07,0x15,0x1b,
        0xa1,0xaf,0xbd,0xb3,0x99,0x97,0x85,0x8b,0xd1,0xdf,0xcd,0xc3,0xe9,0xe7,0xf5,0xfb,
        0x9a,0x94,0x86,0x88,0xa2,0xac,0xbe,0xb0,0xea,0xe4,0xf6,0xf8,0xd2,0xdc,0xce,0xc0,
        0x7a,0x74,0x66,0x68,0x42,0x4c,0x5e,0x50,0x0a,0x04,0x16,0x18,0x32,0x3c,0x2e,0x20,
        0xec,0xe2,0xf0,0xfe,0xd4,0xda,0xc8,0xc6,0x9c,0x92,0x80,0x8e,0xa4,0xaa,0xb8,0xb6,
        0x0c,0x02,0x10,0x1e,0x34,0x3a,0x28,0x26,0x7c,0x72,0x60,0x6e,0x44,0x4a,0x58,0x56,
        0x37,0x39,0x2b,0x25,0x0f,0x01,0x13,0x1d,0x47,0x49,0x5b,0x55,0x7f,0x71,0x63,0x6d,
        0xd7,0xd9,0xcb,0xc5,0xef,0xe1,0xf3,0xfd,0xa7,0xa9,0xbb,0xb5,0x9f,0x91,0x83,0x8d
    };
    
    private static int[] sBox = new int[] {
            //0     1    2      3     4    5     6     7      8    9     A      B    C     D     E     F
            0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
            0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
            0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
            0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
            0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
            0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
            0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
            0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
            0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
            0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
            0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
            0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
            0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
            0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
            0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
            0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 };

    private static int[] rsBox = new int[] {
            0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
            0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
            0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
            0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
            0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
            0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
            0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
            0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
            0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
            0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
            0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
            0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
            0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
            0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
            0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
            0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d };
    private static int[] rCon = new int[] {
            0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
            0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
            0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
            0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
            0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
            0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
            0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
            0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
            0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
            0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
            0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
            0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
            0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
            0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
            0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
            0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d };
    public AES_Test(){    
    }
        
    public void gennerateKey(String key){
        if(key.length() == 16){
            this.Nk = 4;
            this.Nr = 10;
            this.word = new int[Nb * (Nr +1)];
        }else if(key.length() == 24){
            this.Nk = 6;
            this.Nr = 12;
            this.word = new int[Nb * (Nr +1)];
        }else if(key.length() == 32){
            this.Nk = 8;
            this.Nr = 14;
            this.word = new int[Nb * (Nr +1)];
        }
        this.key = key.getBytes();
    }
    
    public void expankey(){
        int temp, i = 0;
        
        while (i < Nk) {
            word[i] = 0x00000000; // khỏi tạo từ thứ i
            word[i] |= key[4*i] << 24;
            word[i] |= key[4*i + 1] << 16;
            word[i] |= key[4*i + 2] << 8;
            word[i] |= key[4*i + 3];
            i++;
        }
        
        i = Nk;
        while (i < Nb * (Nr + 1)) { 
            temp = word[i-1];
            if(i % Nk == 0){
                temp = subWord(rotWord(temp)) ^ (rCon[i / Nk] << 24);   // rcon dịch trái 24 vì đang lưu rcon dạng chỉ có 8 bit
            }else if(Nk > 6 && i% Nk == 4) {
                temp = subWord(temp);
            }  
            word[i] = word[i - Nk] ^ temp;
            i++;
        }
    }
    
    public int rotWord(int word){
        int temp = (word << 8) ^ ((word >> 24) & 0x000000ff);
        return temp;
    }
    
    public void addRoundKey(int[][] oldState, int current) {  
        for(int c = 0; c < 4; c++){
            for(int r = 0; r < 4; r++){
                out[r][c] = oldState[r][c] ^ (word[current * Nb + c] << (r * 8) >>> 24);
            }
        }
    }  
    
    public int subWord(int word) {
        int temp = 0;
        for(int i = 24; i >= 0; i-=8) {
            int in = word << i >>> 24; // lây ra từng 8 bit một 
            temp |= sBox[in] << (24 - i);   // hợp các sbox thay thế tìm được 
        }  
        return temp;
    }
    
    public void subByte(int[][] oldState){
        for(int i = 0; i < 4; i++) {
            for(int j = 0; j < 4; j++){
                out[i][j] = subWord(oldState[i][j]) & 0xff; //loại bỏ 0 thừa ở bước dùng chung subword
            }
        }
    }
    
     public void shifRow(int[][] oldState){
        int temp1, temp2, temp3;
        
        temp1 = oldState[1][0];
         for(int i = 0; i < Nb - 1; i++) {
             out[1][i] = oldState[1][i+1];
         }
         out[1][Nb-1] = temp1;
        
         temp1 = oldState[2][0];
         temp2 = oldState[2][1];
         for (int i = 0; i < Nb - 2; i++) {
             out[2][i] = oldState[2][i+2];
         }
         out[2][Nb-1] = temp2;
         out[2][Nb-2] = temp1;
         
         
        temp1 = oldState[3][0];
        temp2 = oldState[3][1];
        temp3 = oldState[3][2];
         for (int i = 0; i < Nb - 3; i++) {
             out[3][i] = oldState[3][i+3];
         }
         out[3][Nb-1] = temp3;
         out[3][Nb-2] = temp2;
         out[3][Nb-3] = temp1;
    }
    
     public int mult(int check, int state){
         if(check == 0x02){
             return mul2[state];
         }else if(check == 0x03){
             return mul3[state];
         }else if(check == 0x09){
             return mul9[state];
         }else if(check == 0x0b){
             return mulb[state];
         }else if(check == 0x0d){
             return muld[state];
         }else if(check == 0x0e){
             return mule[state];
         }
         return state;
     }
     
     public int mult2(int a, int b){
         int sum = 0;
         while(a != 0){
             if( (a & 1) != 0){
                 sum = sum ^ b;
             }
             b = xtime(b);
             a = a >>> 1;
         }
         return sum;
     }
     
     public int xtime(int b) {
         if((b & 0x80) == 0){
             return b << 1;
         }
         
         return b << 1 ^ 0x1b;
     }
     
     public void mixColumn(int[][] oldState){
        for(int c = 0; c < 4; c++){
            int temp1 = mult(0x02, oldState[0][c]) ^ mult(0x03, oldState[1][c]) ^ oldState[2][c] ^ oldState[3][c]; // cot 0 nhân với mảng ...
            int temp2 = oldState[0][c] ^ mult(0x02, oldState[1][c]) ^ mult(0x03, oldState[2][c]) ^ oldState[3][c];
            int temp3 = oldState[0][c] ^ oldState[1][c] ^ mult(0x02, oldState[2][c]) ^ mult(0x03, oldState[3][c]);
            int temp4 = mult(0x03, oldState[0][c]) ^ oldState[1][c] ^ oldState[2][c] ^ mult(0x02, oldState[3][c]);
        
            out[0][c] = temp1;
            out[1][c] = temp2;
            out[2][c] = temp3;
            out[3][c] = temp4;
        }
    }   
      
    public void invShifRow(int[][] oldState) {
        int temp1, temp2, temp3;
        
        temp1 = oldState[1][Nb-1];
        for(int i = Nb-1; i > 0; i--){
            out[1][i] = oldState[1][i-1];
        }
        out[1][0] = temp1;
        
        temp1 = oldState[2][Nb-1];
        temp2 = oldState[2][Nb-2];
        for(int i = Nb-1; i > 1; i--){
            out[2][i] = oldState[2][i-2];
        }
        out[2][0] = temp2;
        out[2][1] = temp1;
        
        temp1 = oldState[3][Nb-1];
        temp2 = oldState[3][Nb-2];
        temp3 = oldState[3][Nb-3];
        for(int i = Nb-1; i > 2; i--){
            out[3][i] = oldState[3][i-3];
        }
        out[3][0] = temp3;
        out[3][1] = temp2;
        out[3][2] = temp1;
    }
    
    public void invSubByte(int[][] oldState){
        for (int i = 0; i < Nb; i++) {
            for (int j = 0; j < Nb; j++) {
                out[i][j] = invSubWord(oldState[i][j])  & 0xFF;
            }
        }
    }
    
    public int invSubWord(int word){
        int subWord = 0;
        for (int i = 24; i >= 0; i -= 8) {
            int in = word << i >>> 24;
            subWord |= rsBox[in] << (24 - i);
        }
        return subWord;
    }
    
    public void invMixColumn(int[][] oldState){
        int temp0, temp1, temp2, temp3;
        for (int c = 0; c < Nb; c++) {
            temp0 = mult(0x0e, oldState[0][c]) ^ mult(0x0b, oldState[1][c]) ^ mult(0x0d, oldState[2][c]) ^ mult(0x09, oldState[3][c]);
            temp1 = mult(0x09, oldState[0][c]) ^ mult(0x0e, oldState[1][c]) ^ mult(0x0b, oldState[2][c]) ^ mult(0x0d, oldState[3][c]);
            temp2 = mult(0x0d, oldState[0][c]) ^ mult(0x09, oldState[1][c]) ^ mult(0x0e, oldState[2][c]) ^ mult(0x0b, oldState[3][c]);
            temp3 = mult(0x0b, oldState[0][c]) ^ mult(0x0d, oldState[1][c]) ^ mult(0x09, oldState[2][c]) ^ mult(0x0e, oldState[3][c]);

            out[0][c] = temp0;
            out[1][c] = temp1;
            out[2][c] = temp2;
            out[3][c] = temp3;
        }
    }
    
    public void createState(byte[] array) {
        in = new int[4][4];
        for(int i = 0; i < 4; i++){
            for(int j = 0; j < 4; j++){
                in[j][i] = array[i * Nb + j];
            }
        }
    }
    
    public String ECB_encrypt(String name){
        ByteArrayOutputStream enCode = new ByteArrayOutputStream();
        gennerateKey(this.getStringKey());
        StringBuffer builder = new StringBuffer();
        Path path = Paths.get(name);
        try {
            BufferedReader br = Files.newBufferedReader(path);
            int i = 0;
            while ((i = br.read()) != -1) {
                builder.append((char) i);
            }
            byte[] tranToByte = builder.toString().getBytes(StandardCharsets.UTF_8);
            for(int i1 = 0; i1 < tranToByte.length; i1+=16){
                int[][] temp = encode(Arrays.copyOfRange(tranToByte, i1, i1+16));
                for(int k = 0; k < 4; k++){
                    for (int j = 0; j < 4; j++) {
                        enCode.write(temp[k][j]);
                    }
                }
            }
        }
        catch (Exception e) {
            System.err.println(e);
        }
        
        String result = Base64.getEncoder().encodeToString(enCode.toByteArray());
        FileWriter fileWriter = null;
        BufferedWriter bufferedWriter = null;
        
        try {
            fileWriter = new FileWriter("C:\\Users\\Admin\\Downloads\\AES\\xaumaECB.txt");
            bufferedWriter = new BufferedWriter(fileWriter);
            bufferedWriter.write(result);
        } catch (Exception e) {
            e.printStackTrace();
        }finally{
            try {
                bufferedWriter.close();
                fileWriter.close();
            } catch (IOException ex) {
                Logger.getLogger(AES_Test.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return result;
    }
    
    public int [][] encode(byte[] builder) {
        out = new int[Nb][Nb];
        expankey();
        createState(builder);
        int current = 0;
        addRoundKey(in, current);
        
        for (current = 1; current < Nr; current++) {
            subByte(out);
            shifRow(out);
            mixColumn(out);
            addRoundKey(out, current);
        }
        
        subByte(out);
        shifRow(out);
        addRoundKey(out, current);
        
        return out;
    }   
    
    public int[][] decode(int[][] in) {           
        int current = Nr;
                
        addRoundKey(in, current);
                
        for(current = Nr-1; current > 0; current--){
            invShifRow(out);
            invSubByte(out);
            addRoundKey(out, current);
            invMixColumn(out);
        }
        
        
        invShifRow(out);
        invSubByte(out);
        addRoundKey(out, current);

        return out;
    }
    
    public String ECB_decrypt(String fileNameDecode){
        String stringDeCode = "";
        
        FileReader fileReader = null;
        StringBuffer buffer = null;
        
        try {
            fileReader = new FileReader(fileNameDecode);
            buffer = new StringBuffer();
            int k = 0;
            while ((k = fileReader.read()) != -1) {
                buffer.append((char)k);
            }
            byte[] byteEncode = Base64.getDecoder().decode(buffer.toString());
            in = new int[Nb][Nb];
            ByteArrayOutputStream resultByte = new ByteArrayOutputStream();
            for(int loop = 0; loop < byteEncode.length ; loop +=16){
                for(int i = 0; i < 4; i++){
                    for (int j = 0; j < 4; j++) {
                        in[i][j] = byteEncode[i * 4 + j + loop];
                    }
                }
                int[][] result = decode(in);
                for(int i = 0; i < 4; i++){
                    for (int j = 0; j < 4; j++) {
                        resultByte.write((byte) result[j][i]);
                    }
                }
            }
            
            stringDeCode += new String(resultByte.toByteArray(), StandardCharsets.UTF_8);
        } catch (Exception e) {
            e.printStackTrace();
        }
               
        return stringDeCode;
    }
    
    public byte [] xor(byte [] a, byte [] b){
        byte[] result = new byte[Math.min(a.length, b.length)];
        for (int i = 0; i < a.length; i++) {
            int temp = a[i] ^ b[i];
            result[i] = (byte) (temp & 0xff);
            
        }
        return result;
    }
    
    public String CBC_encrypt(String name, String iv){
        ByteArrayOutputStream enCode = new ByteArrayOutputStream();
        gennerateKey(this.getStringKey());
        Path path = Paths.get(name);
        byte[] prevByte = null;
        StringBuffer builder = new StringBuffer();
        
        try {
            BufferedReader br = Files.newBufferedReader(path);
            int i = 0;
            while ((i = br.read()) != -1) {
                builder.append((char) i);
            }
            byte[] tranToByte = builder.toString().getBytes(StandardCharsets.UTF_8);
            for(int i1 = 0; i1 < tranToByte.length; i1+=16){
                byte[] past = Arrays.copyOfRange(tranToByte, i1, i1+16);
                if(prevByte == null){
                    prevByte = iv.getBytes();
                }
                past = xor(prevByte, past);

                prevByte = CBC_encode(past);
                enCode.write(prevByte);
            }
        }
        catch (Exception e) {
            System.err.println(e);
        }
        
        String result = Base64.getEncoder().encodeToString(enCode.toByteArray());
        FileWriter fileWriter = null;
        BufferedWriter bufferedWriter = null;
        
        try {
            fileWriter = new FileWriter("C:\\Users\\Admin\\Downloads\\AES\\xaumaCBC.txt");
            bufferedWriter = new BufferedWriter(fileWriter);
            bufferedWriter.write(result);
        } catch (Exception e) {
            e.printStackTrace();
        }finally{
            try {
                bufferedWriter.close();
                fileWriter.close();
            } catch (IOException ex) {
                Logger.getLogger(AES_Test.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return result;
    }
    
    public String CBC_decrypt(String fileNameDecode, String iv){
        String stringDeCode = "";
        ByteArrayOutputStream result = new ByteArrayOutputStream();
        FileReader fileReader = null;
        StringBuffer buffer = null;
        
        try {
            fileReader = new FileReader(fileNameDecode);
            buffer = new StringBuffer();
            int k = 0;
            while ((k = fileReader.read()) != -1) {
                buffer.append((char)k);
            }
            byte[] byteEncode = Base64.getDecoder().decode(buffer.toString());
            byte[] prevByte = null;
            for(int loop = 0; loop < byteEncode.length ; loop +=16){
                byte[] past =Arrays.copyOfRange(byteEncode, loop, loop + 16);
                if(prevByte == null) {                
                    prevByte = iv.getBytes();
                }
                byte[] temp = CBC_decode(past);

                temp = xor(prevByte, temp);

                for (int j = 0; j < 16; j++) {
                    prevByte[j] = past[j];
                }
                result.write(temp);
            }
                        
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        stringDeCode = new String(result.toByteArray(), StandardCharsets.UTF_8);
        return stringDeCode;
    }
    
    public byte[] CBC_encode(byte[] builder) {
        out = new int[Nb][Nb];
        expankey();
        createState(builder);
        int current = 0;
        addRoundKey(in, current);
        
        for (current = 1; current < Nr; current++) {
            subByte(out);
            shifRow(out);
            mixColumn(out);
            addRoundKey(out, current);
        }
        
        subByte(out);
        shifRow(out);
        addRoundKey(out, current);
        byte[] result = new byte[16];
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                result[i*Nb + j] = (byte)(out[j][i] & 0xff);
            }
        }
        return result;
    }
        
    public byte[] CBC_decode(byte[] past) {           
        int current = Nr;
        in = new int[4][4];
        for(int i = 0; i < 4; i++){
            for (int j = 0; j < 4; j++) {
                in[j][i] = past[i * 4 + j] & 0xff;
            }
        }
        addRoundKey(in, current);
                
        for(current = Nr-1; current > 0; current--){
            invShifRow(out);
            invSubByte(out);
            addRoundKey(out, current);
            invMixColumn(out);
        }
        
        
        invShifRow(out);
        invSubByte(out);
        addRoundKey(out, current);
        
        byte[] result = new byte[16];
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                result[ i*Nb + j] = (byte)(out[j][i] & 0xff);
            }
        }
        return result;
    }

    public String getStringKey() {
        return stringKey;
    }

    public void setStringKey(String stringKey) {
        this.stringKey = stringKey;
    }
           
}
